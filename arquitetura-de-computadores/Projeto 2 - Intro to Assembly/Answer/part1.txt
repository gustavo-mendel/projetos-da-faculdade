#
# Aluno: Gustavo Mendel Queiroz e Souza
# E-mail: gustavo.mendel.br@gmail.com
#

1. Em RISC-V temos as diretrizes, como por exemplo .data, .word e .text; Em suma essas diretrizes representam diferentes tipos de dados e principalmente onde são armazenados na memória. Veremos com mais entonação a diferença entre o data e o text.

Quando queremos armazenar valores na memória, constantes, podendo ser um valor independente ou então algum tipo de array, usamos então a diretriz .data para armazenar esses dados na memória. Para representar as instruções do programa, sucintamente o código em si, queremos usar o .text. A principal diferença é onde são armazenados na memória, que facilita para o compilador que vai transformar nosso código em linguagem de máquina. É uma forma de organização. Ter instruções, dados e outros tipos, todos em uma mesma região da memória é um problema dos grandes para buscar e guardar, com a separação em segmentos, isso é resolvido. 

Falando agora sobre o .word, é um tipo de dado que iremos gravar na .data, word significa palavra, e é exatamente isso, podemos guardar uma "palavra" de 32 bits em um endereço de memória de 4 bytes. Também há outras formas de dados, como byte, short, long, entre alguns outros.


2. O número printado no output é 34. Ele representa o resultado do programa, que tem como objetivo achar o n-ésimo termo da sequência de Fibonacci, neste nosso caso queríamos o 10º termo da sequência, que é o 34. Nota: consideramos que o primeiro termo da sequência é o 0, segundo é 1, terceiro é 1, quarto é 2 e assim por diante. Notar também que a declaração de "n" está 9, pois começamos a contar do 0, então seria equivalente ao 10º termo e não ao 9º termo.


3. Endereço de "n": 0x10000010. Descubro isso particularmente na instrução "la t3, n", que seria load address, carregar endereço de n. E então o registrador t3 irá conter o valor 0x10000010 referente ao endereço de "n".


4. Indo de linha em linha, através do botão step, vou avançando na execução até chegar particularmente na instrução "lw t3, 0(t3)", aqui ele já carregou o endereço de memória de "n" e colocou no registrador t3, e neste momento ele vai carregar a palavra (word) dentro desse endereço ainda para o registrador t3, que seria o "n" propriamente dito. O "n" é a condição de parada do loop para calcular a sequência de Fibonacci, então a partir do momento que nesta instrução é carregada a word "n" contendo o valor 9, ou 0x00000009, eu mudo o valor do registrador t3 que é 9 para 12, ou 0x0000000C, alterando então a condição de parada do loop, indicando que eu desejo pegar o 13º termo da sequência, resultando no valor 144.

